// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true> &Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false> &Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// pcop_backend
Rcpp::NumericMatrix pcop_backend(const Rcpp::NumericMatrix &x, float c_d,
                                 float c_h);
RcppExport SEXP _Rpcop_pcop_backend(SEXP xSEXP, SEXP c_dSEXP, SEXP c_hSEXP) {
  BEGIN_RCPP
  Rcpp::RObject rcpp_result_gen;
  Rcpp::RNGScope rcpp_rngScope_gen;
  Rcpp::traits::input_parameter<const Rcpp::NumericMatrix &>::type x(xSEXP);
  Rcpp::traits::input_parameter<float>::type c_d(c_dSEXP);
  Rcpp::traits::input_parameter<float>::type c_h(c_hSEXP);
  rcpp_result_gen = Rcpp::wrap(pcop_backend(x, c_d, c_h));
  return rcpp_result_gen;
  END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rpcop_pcop_backend", (DL_FUNC)&_Rpcop_pcop_backend, 3}, {NULL, NULL, 0}};

RcppExport void R_init_Rpcop(DllInfo *dll) {
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
}
